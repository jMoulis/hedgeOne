{"version":3,"sources":["components/Force/Templates.tsx","components/DynamicComponent/List.tsx"],"names":["Bar","styled","div","color","height","width","marginBottom","Button","label","bgColor","radius","Buttons","Root","ul","ListItem","li","connect","activeTab","tabReducer","dispatch","setTabsAction","tab","setTabs","useState","error","setError","entityConfig","setEntityConfig","datas","setDatas","useEffect","a","axios","method","url","entity","response","data","message","fetchDatas","onClick","type","isCreation","map","key","id","value","Object","keys","displayList","name","selectedItemId"],"mappings":"01BASO,IAAMA,EAAMC,IAAOC,IAAV,IACM,qBAAGC,OAAqB,QAClC,qBAAGC,QACJ,gBAAGC,EAAH,EAAGA,MAAH,OAAgBA,EAAK,UAAMA,EAAN,OAAmB,QAChC,gBAAGC,EAAH,EAAGA,aAAH,OACfA,EAAY,UAAMA,EAAN,OAA0B,WAoB7BC,GAjBQN,IAAOO,MAAV,KAiBIP,YAAOD,EAAPC,CAAH,IACP,qBAAGG,QACJ,qBAAGC,OAAqB,GACb,qBAAGI,SAAyB,cACvC,qBAAGN,OAAqB,WAQhB,qBAAGO,W,wqBCvCtB,IAAMC,EAAUV,IAAOC,IAAV,KAIPU,EAAOX,IAAOY,GAAV,KAIJC,EAAWb,IAAOc,GAAV,KAgJCC,sBATS,SAAC,GAAD,MAAqB,CAC3CC,UADsB,EAAGC,WACHD,YAGG,SAAAE,GAAQ,MAAK,CACtCC,cAAe,SAAAC,GACbF,EAASG,YAAQD,OAGNL,CA3Hf,YAAoD,IAA7BC,EAA4B,EAA5BA,UAAWG,EAAiB,EAAjBA,cAAiB,EACvBG,mBAAS,MADc,mBAC1CC,EAD0C,KACnCC,EADmC,OAETF,mBAAS,IAFA,mBAE1CG,EAF0C,KAE5BC,EAF4B,OAGvBJ,mBAAS,IAHc,mBAG1CK,EAH0C,KAGnCC,EAHmC,KAuCjD,OAlCAC,oBAAU,WAYJb,GAXY,sCAAG,4BAAAc,EAAA,8EAEQC,IAAM,CAC3BC,OAAQ,MACRC,IAAI,QAAD,OAAUjB,EAAUkB,OAApB,iBAJU,OAETC,EAFS,OAMfT,EAAgBS,EAASC,MANV,gDAQfZ,EAAS,KAAIa,SARE,uDAAH,oDAYdC,IAED,CAACtB,IAEJa,oBAAU,WAYJJ,GAAgBT,GAXJ,sCAAG,4BAAAc,EAAA,8EAEQC,IAAM,CAC3BC,OAAQ,MACRC,IAAI,QAAD,OAAUjB,EAAUkB,OAApB,WAJU,OAETC,EAFS,OAMfP,EAASO,EAASC,MANH,gDAQfZ,EAAS,KAAIa,SARE,uDAAH,oDAYdC,IAED,CAACb,EAAcT,IAGhB,oCACGO,GAAS,8BAAOA,GACjB,kBAAC,IAAD,CACEnB,MAAO,GACPmC,QAAS,WACP,IAAMnB,EAAM,CACVc,OAAQlB,EAAUkB,OAClB3B,MAAO,UACPiC,KAAM,WACNC,YAAY,GAEdtB,EAAcC,KATlB,uBAYgBJ,EAAUkB,SAE1B,4BACGP,GACCA,EAAMe,IAAI,SAACN,GACT,OACE,kBAACvB,EAAD,CAAU8B,IAAKP,EAAKQ,GAAGC,OACrB,kBAAClC,EAAD,KACGmC,OAAOC,KAAKX,GAAMM,IAAI,SAAAC,GACrB,OAAKP,EAAKO,GAAKK,YAEc,kBAApBZ,EAAKO,GAAKE,OACU,kBAApBT,EAAKO,GAAKE,MAEV,KAEP,kBAAChC,EAAD,CACE8B,IAAKA,EACLJ,QAAS,WACP,IAAMnB,EAAM,CACVc,OAAQE,EAAKF,OAAOW,MACpBtC,MAAO6B,EAAKa,KAAKJ,MACjBK,eAAgBd,EAAKQ,GAAGC,MACxBL,KAAM,YAERrB,EAAcC,KAGfgB,EAAKO,GAAKE,OAnBoB,QAwBvC,kBAACnC,EAAD,KACE,kBAAC,IAAD,CACE8B,KAAK,SACLhC,QAAQ,QACRN,MAAM,QACNE,MAAO,EACPD,OAAQ,EACRM,OAAQ,IAEV,kBAAC,IAAD,CACE+B,KAAK,SACLhC,QAAQ,MACRN,MAAM,QACNE,MAAO,EACPD,OAAQ,EACRM,OAAQ","file":"static/js/2.d864082c.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\ninterface BarProps {\n  color?: string;\n  height?: number | string;\n  width?: number | string;\n  marginBottom?: number | string;\n}\n\nexport const Bar = styled.div<BarProps>`\n  background-color: ${({ color }) => color || '#fff'};\n  height: ${({ height }) => height}rem;\n  width: ${({ width }) => (width ? `${width}rem` : '100%')};\n  margin-bottom: ${({ marginBottom }) =>\n    marginBottom ? `${marginBottom}rem` : '0.5rem'};\n`;\n\nexport const Label = styled.label`\n  margin-right: 0.5rem;\n  display: inline-block;\n  min-width: 9rem;\n  font-size: 1.4rem;\n  margin-bottom: 0.5rem;\n`;\n\n// TODO: Modify any type\ninterface ButtonProps extends BarProps {\n  bgColor?: string;\n  color?: string;\n  type?: string;\n  radius?: number | string;\n  onClick?: any;\n}\n\nexport const Button = styled(Bar)<ButtonProps>`\n  height: ${({ height }) => height}rem;\n  width: ${({ width }) => width || 7}rem;\n  background-color: ${({ bgColor }) => bgColor || 'lightgreen'};\n  color: ${({ color }) => color || 'inherit'};\n  margin-right: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  border-radius: ${({ radius }) => radius}px;\n  padding: 1rem;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport styled from '@emotion/styled';\nimport { setTabs } from 'store/reducers/tabReducer';\nimport { Button } from 'components/Force/Templates';\n\nconst Buttons = styled.div`\n  display: flex;\n`;\n\nconst Root = styled.ul`\n  display: flex;\n`;\n\nconst ListItem = styled.li`\n  padding: 1rem;\n  text-align: center;\n  text-transform: capitalize;\n  transition: all 150ms;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  justify-content: space-between;\n  border-bottom: 1px solid lightGray;\n  &:hover {\n    background-color: #e4e4e4;\n  }\n`;\n// TODO: Add dynamic displayedField\n\ninterface Props {\n  activeTab?: any | null;\n  setTabsAction: Function;\n}\n\nfunction List<Props>({ activeTab, setTabsAction }) {\n  const [error, setError] = useState(null);\n  const [entityConfig, setEntityConfig] = useState([]);\n  const [datas, setDatas] = useState([]);\n\n  useEffect(() => {\n    const fetchDatas = async () => {\n      try {\n        const response = await axios({\n          method: 'get',\n          url: `data/${activeTab.entity}Config.json`,\n        });\n        setEntityConfig(response.data);\n      } catch (err) {\n        setError(err.message);\n      }\n    };\n    if (activeTab) {\n      fetchDatas();\n    }\n  }, [activeTab]);\n\n  useEffect(() => {\n    const fetchDatas = async () => {\n      try {\n        const response = await axios({\n          method: 'get',\n          url: `data/${activeTab.entity}.json`,\n        });\n        setDatas(response.data);\n      } catch (err) {\n        setError(err.message);\n      }\n    };\n    if (entityConfig && activeTab) {\n      fetchDatas();\n    }\n  }, [entityConfig, activeTab]);\n\n  return (\n    <>\n      {error && <span>{error}</span>}\n      <Button\n        width={20}\n        onClick={() => {\n          const tab = {\n            entity: activeTab.entity,\n            label: 'Nouveau',\n            type: 'document',\n            isCreation: true,\n          };\n          setTabsAction(tab);\n        }}\n      >\n        {`Cr√©er une ${activeTab.entity}`}\n      </Button>\n      <ul>\n        {datas &&\n          datas.map((data: any) => {\n            return (\n              <ListItem key={data.id.value}>\n                <Root>\n                  {Object.keys(data).map(key => {\n                    if (!data[key].displayList) return null;\n                    if (\n                      typeof data[key].value !== 'string' &&\n                      typeof data[key].value !== 'number'\n                    )\n                      return null;\n                    return (\n                      <ListItem\n                        key={key}\n                        onClick={() => {\n                          const tab = {\n                            entity: data.entity.value,\n                            label: data.name.value,\n                            selectedItemId: data.id.value,\n                            type: 'document',\n                          };\n                          setTabsAction(tab);\n                        }}\n                      >\n                        {data[key].value}\n                      </ListItem>\n                    );\n                  })}\n                </Root>\n                <Buttons>\n                  <Button\n                    type=\"button\"\n                    bgColor=\"green\"\n                    color=\"white\"\n                    width={2}\n                    height={2}\n                    radius={2}\n                  />\n                  <Button\n                    type=\"button\"\n                    bgColor=\"red\"\n                    color=\"white\"\n                    width={2}\n                    height={2}\n                    radius={2}\n                  />\n                </Buttons>\n              </ListItem>\n            );\n            // return <ListItem key={key}>{entityItem[key]}</ListItem>;\n          })}\n      </ul>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ tabReducer }) => ({\n  activeTab: tabReducer.activeTab,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setTabsAction: tab => {\n    dispatch(setTabs(tab));\n  },\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(List);\n"],"sourceRoot":""}